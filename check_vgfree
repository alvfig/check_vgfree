#!/usr/bin/python
# check_vgfree
# Nagios plugin to check free space on LVM volume group.



import optparse
import os
import platform
import subprocess
import sys



def main():
    # Parse command line options.
    optionparser = optparse.OptionParser()
    optionparser.add_option("-c", "--critical", type="int",
        help="critical limit in GB")
    optionparser.add_option("-C", "--critical-percent", type="float", dest="cp",
        help="% critical limit")
    optionparser.add_option("-g", "--volume-group", dest="vg",
        help="volume group to check")
    optionparser.add_option("-w", "--warning", type="int",
        help="warning limit in GB")
    optionparser.add_option("-W", "--warning-percent", type="float", dest="wp",
        help="% warning limit")
    optionparser.set_defaults(critical=0, cp=0, warning=0, wp=0, vg="vg0")
    options, args = optionparser.parse_args()

    # Pick vgs command.
    command = "/sbin/vgs"
    if not os.path.isfile(command):
        command = "/usr" + command
        if not os.path.isfile(command):
            print "UNDEFINED", "-", "vgs command not found"
            sys.exit(3)

    # Pick free space on volume group.
    command = [command, "--noheadings", "--nosuffix",
        "--options=vg_size,vg_free", "--units=g", options.vg]
    environment = {"LANG": "C"}
    process = subprocess.Popen(command, stdout=subprocess.PIPE,
        stderr=subprocess.PIPE, env=environment)
    output, error = process.communicate()
    if 0 < process.returncode:
        error = error.split('\n')[0].strip()
        print "UNDEFINED", "-", error,
        sys.exit(3)
    size, free = [float(x) for x in output.split()]
    percent = 100 * free / size

    # Check the limits.
    if '2.6' <= platform.python_version():
        result = "- {}GB ({}%) free on volume group {}".format(free,
            percent, options.vg)
    else:
        result = "- %gGB (%g%%) free on volume group %s" % (free,
            percent, options.vg)
    if free < options.critical or 0 < percent < options.cp:
        print "CRITICAL", result
        sys.exit(2)
    elif free < options.warning or 0 < percent < options.wp:
        print "WARNING", result
        sys.exit(1)
    else:
        print "OK", result
        sys.exit(0)



if __name__ == '__main__':
    main()
